@begin(section)
@title(Overview)

Codex is a documentation generator.

@end(section)

@begin(section)
@title(Tutorial)

This tutorial goes through the process of documenting a Lisp project with Codex.

@begin(section)
@title(Getting Started)

First, ceate a folder named @c(docs) in your project's root directory (the same
directory as the ASDF file). There, you need to create two files:
@c(manifest.lisp) and @c(manual.scr).

The @c(manifest.lisp) file is read by Codex to figure out how to generate your
docs, and in your case looks like this:

@code[lang=lisp](@include[path="includes/manifest.lisp"]())

What this tells Codex is, mainly:

@begin(list)

@item(Use Scriba to parse the docstrings.)

@item(Before generating the docs, load and extract docstrings from the
@c(my-library) system.)

@item(Generate a document titled "My Library" from the @c(manual.scr) file.)

@item(Write the document to mutiple HTML files using the Minima template.)

@end(list)

The @c(manual.scr) file will be fairly bare-bones for now:

@code[lang=scribe](@include[path="includes/overview.scr"]())

@end(section)

@begin(section)
@title(Writing with Scriba)

Scriba is the preferred markup format for Codex documentation. It's similar to
Scribe and Texinfo, has a simple and general syntax, and supports arbitrary
CommonDoc macros. Additionally, it can be used inside Lisp docstrings without
escaping anything.

@end(section)

@begin(section)
@title(Inserting Nodes)

@end(section)

@begin(section)
@title(Building)

Finally, run @c((codex:document :my-system)). You'll see some compilation output
and a lot of lines with "Inserting documentation for...". When that's done, you
can open the resulting HTML in your browser.

@end(section)

@end(section)

@begin(section)
@title(Templates)

@begin(section)
@title(Minima)

Minima is, as the name implies, a minimalist theme.

@end(section)

@begin(section)
@title(Gamma)

Gamma is the template you're looking at. It's inspired by the
@link[uri="https://stripe.com/docs"](Stripe documentation).

@end(section)

@end(section)

@begin(section)
@title(Authoring Templates)

@begin(section)
@title(HTML Classes)

The following is a list of HTML classes in the documentation nodes inserted into
the documents. Some of these (e.g., @c(codex-slot) and @c(codex-class-slot)) are
used simultaneously.

@begin(deflist)

@term(@c(codex-name))
@def(The name of a node, e.g. a function or a class.)

@term(@c(codex-docstring))
@def(The docstring section of a node.)

@term(@c(codex-doc-node))
@def(A documentation node.)

@term(@c(codex-lambda-list))
@def(The lambda list of an operator node.)

@term(@c(codex-function))
@def(A function node.)

@term(@c(codex-macro))
@def(A macro node.)

@term(@c(codex-generic-function))
@def(A generic function node.)

@term(@c(codex-method))
@def(A method node.)

@term(@c(codex-operator))
@def(This class is present in all operator nodes. If an unsupported subclass of
@c(operator-node) is used, it expands the name, docstring and lambda list and
nothing more, and only uses this class.)

@term(@c(codex-slot))
@def(A structure or class slot.)

@term(@c(codex-structure-slot))
@def(The slot of a structure. This only contains a name, not a docstring.)

@term(@c(codex-class-slot))
@def(The slot of a class.)

@term(@c(codex-record))
@def(A structure or class node.)

@term(@c(codex-structure))
@def(A structure node.)

@term(@c(codex-class))
@def(A class node.)

@term(@c(codex-condition))
@def(A condition node.)

@term(@c(codex-variable))
@def(A variable node.)

@term(@c(codex-type))
@def(A type definition node.)

@term(@c(codex-type-def))
@def(The actual type definition in the type node.)

@end(deflist)

@end(section)

@end(section)

@begin(section)
@title(Internals)

@begin(section)
@title(Manifest)

The manifest and its components are represented by the following classes:

@cl:with-package[name="codex.manifest"](
@cl:doc(class manifest)
@cl:doc(class document)
@cl:doc(class output-format)
@cl:doc(class html)
@cl:doc(class single-html)
@cl:doc(class multi-html)
)

@end(section)

@begin(section)
@title(Errors)

The following is a list of the error conditions Codex can signal:

@cl:with-package[name="codex.error"](
@cl:doc(condition codex-error)
@cl:doc(condition manifest-error)
@cl:doc(condition unsupported-output-format)
@cl:doc(condition template-error)
)

@end(section)

@end(section)
