(in-package :codex.macro)

;;; Variables

(defparameter *current-package* "common-lisp"
  "A string with the name of the current package being parsed. This is
 'common-lisp' by default.")

;;; Utilities

(defun make-class-metadata (class-name)
  "Create metadata for HTML classes."
  (make-meta
   (list
    (cons "class" class-name))))

;;; Macros in user input (Docstrings, files, etc.)

(define-node cl-ref (macro-node)
  ()
  (:tag-name "clref")
  (:documentation "A reference to a Common Lisp symbol."))

(define-node cl-doc (macro-node)
  ()
  (:tag-name "cldoc")
  (:documentation "Insert parsed documentation."))

(define-node param (macro-node)
  ()
  (:tag-name "param")
  (:documentation "An argument of an operator."))

;;; Macros generated by parsing the documentation

(define-node symbol-node ()
  ((symbol-node-package :reader symbol-node-package
                        :initarg :package
                        :type string
                        :documentation "A symbol's package.")
   (symbol-node-name :reader symbol-node-name
                     :initarg :name
                     :type string
                     :documentation "A symbol's name.")
   (externalp :reader externalp
              :initarg :externalp
              :type boolean
              :documentation "Whether the symbol is external.")
   (setfp :reader setfp
          :initarg :setfp
          :initform nil
          :type boolean
          :documentation "Whether the symbol is a setf method."))
  (:documentation "A symbol."))

(defmethod render-full-symbol ((symbol symbol-node))
  (concatenate 'string
               (symbol-node-package symbol)
               ":"
               (symbol-node-name symbol)))

(defmethod render-humanize ((symbol symbol-node))
  (string-downcase (symbol-node-name symbol)))

(define-node documentation-node (common-doc.macro:macro-node)
  ((documentation-symbol :reader doc-symbol
                         :initarg :symbol
                         :type symbol-node
                         :documentation "The symbol name of the operator, variable, or class.")
   (documentation-desc :reader doc-description
                       :initarg :doc
                       :type (or null document-node)
                       :documentation "The node's documentation."))
  (:documentation "Superclass for all documentation nodes."))

(define-node operator-node (documentation-node)
 ((l-list :reader operator-lambda-list
          :initarg :lambda-list
          :type string
          :documentation "The operator's lambda list."))
  (:documentation "The base class of functions and macros."))

(define-node function-node (operator-node)
  ()
  (:documentation "A function."))

(define-node macro-node (operator-node)
  ()
  (:documentation "A macro."))

(define-node generic-function-node (operator-node)
  ()
  (:documentation "A generic function."))

(define-node method-node (operator-node)
  ()
  (:documentation "A method."))

(define-node variable-node (documentation-node)
  ()
  (:documentation "A variable."))

(define-node slot-node (documentation-node)
  ((accessors :reader slot-accessors
              :initarg :accessors
              :initform nil
              :type (proper-list symbol-node))
   (readers :reader slot-readers
            :initarg :readers
            :initform nil
            :type (proper-list symbol-node))
   (writers :reader slot-writers
            :initarg :writers
            :initform nil
            :type (proper-list symbol-node)))
  (:documentation "A class or structure slot."))

(define-node record-node (documentation-node)
  ((slots :reader record-slots
          :initarg :slots
          :type (proper-list slot-node)
          :documentation "A list of slots.")))

(define-node struct-node (record-node)
  ()
  (:documentation "A structure."))

(define-node class-node (record-node)
  ()
  (:documentation "A class."))

(define-node type-node (operator-node)
  ()
  (:documentation "A type."))
